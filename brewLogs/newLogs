#! /bin/bash

# First, unzip the exported data from Acaia
file=$( ls *.zip | dmenu -l 5 -p "Please select which to unzip: " )
echo; unzip $file
newCSV=$( ls | grep 82713_brewmaster*.csv )
echo; echo "Moving $newCSV to brewmaster.csv"
mv $newCSV brewmaster.csv
echo

# Displays the brew names matching user input. Presumably this naming convention is known by the user (i.e. shakN, costaN,
# loN, etc..)
read -p "Please enter a brew name from the app, disregarding numerical suffixes: " bestGuess
# If there are missing brews ensure you have the latest export locally and that naming conventions in Acaia app are correct
echo; echo -e "Does this look correct?" '\n' $( grep -ow \"$bestGuess[0-9]\" -i brewmaster.csv ) 
echo; echo -e '(y/n)? '
read commonStr

if [ $commonStr == "y" ]
then
	cont="y"
	commonStr=$bestGuess
else
	# Likely this will not happen, an incorrect pass from bestGuess will likely cause the grep above to output blank
	# space. 
	echo; read -p "Please type a string common to each brew name: " commonStr
	# Verify commonStr was written correctly, if not answering 'n' will exit the script
	echo; read -p "You Wrote '$commonStr'... Is That Correct? (y/n): " cont
fi


if [ $cont == "y" ]
then
	# Extract only the brews we want matching the string entered in chosenBrew
	chosenBrew=$( grep \"$commonStr -i brewmaster.csv )
	existingData=($( ls *.csv ))
	echo

	# Allow file re-writes if another log was taken using the same coffee
	echo "Is this a new coffee, or do you want to overwrite an existing file? Please select a number from below: "
	select choice in "${existingData[@]}" New;
	do
		case $choice in
			New)
				# If a new file is desired, enter the filename below and write the appropriate contents of 
				# brewmaster into the new file
				read -p "Please enter the filename for this data (exclude extention): " brewDataFile
				echo -e $chosenBrew > $brewDataFile.csv
				# Sets a variable for sed manipulation later
				toFormat=$brewDataFile.csv
				echo; break;;
			*)
				# Re-Write the appriopriate file to include the new log
				echo -e $chosenBrew > $choice
				# Variable for sed manipulation
				toFormat=$choice
				echo; break;;
		esac
	done

	# Auto formats each brew onto a new line, otherwise the data comes out as one long line regardless how many brews 
	# you have matching the given string.
	echo; echo "Auto-formatting $toFormat file..."
	sed -i "s/\"*\"\,\"$commonStr*/\n\"$commonStr/g" $toFormat
	sed -i 1,1d $toFormat
	echo; echo "You may now run brewAnalysis.py"
	echo
else
	# If you messed up, enter anything but 'y' when prompted to exit this script.
	echo; echo Please Run This Script Again...
	echo
fi
# Your new or updated file can now be read in correctly by brewAnalysis.py
